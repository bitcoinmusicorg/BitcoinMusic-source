#include <muse/chain/get_config.hpp>
#include <muse/chain/config.hpp>
#include <muse/chain/protocol/asset.hpp>
#include <muse/chain/protocol/types.hpp>
#include <muse/chain/protocol/version.hpp>

namespace muse { namespace chain {

fc::variant_object get_config()
{
   fc::mutable_variant_object result;

#ifdef IS_TEST_NET
   result[ "IS_TEST_NET" ] = true;
#else
   result[ "IS_TEST_NET" ] = false;
#endif

#ifdef IS_MUSE_TEST
   result[ "IS_MUSE_TEST" ] = true;
#else
   result[ "IS_MUSE_TEST" ] = false;
#endif

   result["GRAPHENE_CURRENT_DB_VERSION"] = GRAPHENE_CURRENT_DB_VERSION;
   result["MBD_SYMBOL"] = MBD_SYMBOL;
   result["MUSE_100_PERCENT"] = MUSE_100_PERCENT;
   result["MUSE_1_PERCENT"] = MUSE_1_PERCENT;
   result["MUSE_ADDRESS_PREFIX"] = MUSE_ADDRESS_PREFIX;
   result["MUSE_APR_PERCENT_MULTIPLY_PER_BLOCK"] = MUSE_APR_PERCENT_MULTIPLY_PER_BLOCK_0_2;
   result["MUSE_APR_PERCENT_MULTIPLY_PER_DAY"] = MUSE_APR_PERCENT_MULTIPLY_PER_DAY_0_2;
   result["MUSE_APR_PERCENT_SHIFT_PER_BLOCK"] = MUSE_APR_PERCENT_SHIFT_PER_BLOCK_0_2;
   result["MUSE_APR_PERCENT_SHIFT_PER_DAY"] = MUSE_APR_PERCENT_SHIFT_PER_DAY_0_2;
   result["MUSE_BANDWIDTH_AVERAGE_WINDOW_SECONDS"] = MUSE_BANDWIDTH_AVERAGE_WINDOW_SECONDS;
   result["MUSE_BANDWIDTH_PRECISION"] = MUSE_BANDWIDTH_PRECISION;
   result["MUSE_BLOCKCHAIN_HARDFORK_VERSION"] = MUSE_BLOCKCHAIN_HARDFORK_VERSION;
   result["MUSE_BLOCKCHAIN_VERSION"] = MUSE_BLOCKCHAIN_VERSION;
   result["MUSE_BLOCK_INTERVAL"] = MUSE_BLOCK_INTERVAL;
   result["MUSE_BLOCKS_PER_DAY"] = MUSE_BLOCKS_PER_DAY;
   result["MUSE_BLOCKS_PER_HOUR"] = MUSE_BLOCKS_PER_HOUR;
   result["MUSE_BLOCKS_PER_YEAR"] = MUSE_BLOCKS_PER_YEAR;
   result["MUSE_CHAIN_ID"] = MUSE_CHAIN_ID;
   result["MUSE_CONTENT_APR_PERCENT"] = MUSE_CONTENT_APR_PERCENT;
   result["MUSE_CONVERSION_DELAY"] = fc::variant( MUSE_CONVERSION_DELAY, 1 );
   result["MUSE_CURATE_APR_PERCENT_RESERVE"] = MUSE_CURATE_APR_PERCENT_RESERVE;
   result["MUSE_DEFAULT_SBD_INTEREST_RATE"] = MUSE_DEFAULT_SBD_INTEREST_RATE;
   result["MUSE_FEED_HISTORY_WINDOW"] = MUSE_FEED_HISTORY_WINDOW;
   result["MUSE_FEED_INTERVAL_BLOCKS"] = MUSE_FEED_INTERVAL_BLOCKS;
   result["MUSE_FREE_TRANSACTIONS_WITH_NEW_ACCOUNT"] = MUSE_FREE_TRANSACTIONS_WITH_NEW_ACCOUNT;
   result["MUSE_GENESIS_TIME"] = MUSE_GENESIS_TIME;
   result["MUSE_HARDFORK_REQUIRED_WITNESSES"] = MUSE_HARDFORK_REQUIRED_WITNESSES;
   result["MUSE_INIT_MINER_NAME"] = MUSE_INIT_MINER_NAME;
   result["MUSE_INIT_PUBLIC_KEY_STR"] = MUSE_INIT_PUBLIC_KEY_STR;
   result["MUSE_INIT_SUPPLY"] = MUSE_INIT_SUPPLY;
   result["MUSE_INIT_TIME"] = MUSE_INIT_TIME;
   result["MUSE_IRREVERSIBLE_THRESHOLD"] = MUSE_IRREVERSIBLE_THRESHOLD;
   result["MUSE_MAX_ACCOUNT_NAME_LENGTH"] = MUSE_MAX_ACCOUNT_NAME_LENGTH;
   result["MUSE_MAX_ACCOUNT_WITNESS_VOTES"] = MUSE_MAX_ACCOUNT_WITNESS_VOTES;
   result["MUSE_MAX_ASSET_WHITELIST_AUTHORITIES"] = MUSE_MAX_ASSET_WHITELIST_AUTHORITIES;
   result["MUSE_MAX_AUTHORITY_MEMBERSHIP"] = MUSE_MAX_AUTHORITY_MEMBERSHIP;
   result["MUSE_MAX_BLOCK_SIZE"] = MUSE_MAX_BLOCK_SIZE;
   result["MUSE_MAX_COMMENT_DEPTH"] = MUSE_MAX_COMMENT_DEPTH;
   result["MUSE_MAX_FEED_AGE"] = fc::variant( MUSE_MAX_FEED_AGE, 1 );
   result["MUSE_MAX_INSTANCE_ID"] = MUSE_MAX_INSTANCE_ID;
   result["MUSE_MAX_MEMO_SIZE"] = MUSE_MAX_MEMO_SIZE;
   result["MUSE_MAX_MINERS"] = MUSE_MAX_MINERS;
   result["MUSE_MAX_PROXY_RECURSION_DEPTH"] = MUSE_MAX_PROXY_RECURSION_DEPTH;
   result["MUSE_MAX_RATION_DECAY_RATE"] = MUSE_MAX_RATION_DECAY_RATE;
   result["MUSE_MAX_RESERVE_RATIO"] = MUSE_MAX_RESERVE_RATIO;
   result["MUSE_MAX_RUNNER_WITNESSES"] = MUSE_MAX_RUNNER_WITNESSES;
   result["MUSE_MAX_SHARE_SUPPLY"] = MUSE_MAX_SHARE_SUPPLY;
   result["MUSE_MAX_SIG_CHECK_DEPTH"] = MUSE_MAX_SIG_CHECK_DEPTH;
   result["MUSE_MAX_TIME_UNTIL_EXPIRATION"] = MUSE_MAX_TIME_UNTIL_EXPIRATION;
   result["MUSE_MAX_TRANSACTION_SIZE"] = MUSE_MAX_TRANSACTION_SIZE;
   result["MUSE_MAX_UNDO_HISTORY"] = MUSE_MAX_UNDO_HISTORY;
   result["MUSE_MAX_URL_LENGTH"] = MUSE_MAX_URL_LENGTH;
   result["MUSE_MAX_VOTE_CHANGES"] = MUSE_MAX_VOTE_CHANGES;
   result["MUSE_MAX_VOTED_WITNESSES"] = MUSE_MAX_VOTED_WITNESSES;
   result["MUSE_MAX_WITHDRAW_ROUTES"] = MUSE_MAX_WITHDRAW_ROUTES;
   result["MUSE_MAX_WITNESS_URL_LENGTH"] = MUSE_MAX_WITNESS_URL_LENGTH;
   result["MUSE_MIN_ACCOUNT_CREATION_FEE"] = MUSE_MIN_ACCOUNT_CREATION_FEE;
   result["MUSE_MIN_ACCOUNT_NAME_LENGTH"] = MUSE_MIN_ACCOUNT_NAME_LENGTH;
   result["MUSE_MIN_BLOCK_SIZE_LIMIT"] = MUSE_MIN_BLOCK_SIZE_LIMIT;
   result["MUSE_MIN_CONTENT_REWARD"] = fc::variant( MUSE_MIN_CONTENT_REWARD, 2 );
   result["MUSE_MIN_CURATE_REWARD"] = fc::variant( MUSE_MIN_CURATE_REWARD, 2 );
   result["MUSE_MINER_ACCOUNT"] = MUSE_MINER_ACCOUNT;
   result["MUSE_MINER_PAY_PERCENT"] = MUSE_MINER_PAY_PERCENT;
   result["MUSE_MIN_FEEDS"] = MUSE_MIN_FEEDS;
   result["MUSE_MINING_REWARD"] = fc::variant( MUSE_MINING_REWARD, 2 );
   result["MUSE_MIN_PAYOUT_SBD"] = fc::variant( MUSE_MIN_PAYOUT_SBD, 2 );
   result["MUSE_MIN_PRODUCER_REWARD"] = fc::variant( MUSE_MIN_PRODUCER_REWARD, 2 );
   result["MUSE_MIN_RATION"] = MUSE_MIN_RATION;
   result["MUSE_MIN_TRANSACTION_EXPIRATION_LIMIT"] = MUSE_MIN_TRANSACTION_EXPIRATION_LIMIT;
   result["MUSE_MIN_TRANSACTION_SIZE_LIMIT"] = MUSE_MIN_TRANSACTION_SIZE_LIMIT;
   result["MUSE_MIN_UNDO_HISTORY"] = MUSE_MIN_UNDO_HISTORY;
   result["MUSE_NULL_ACCOUNT"] = MUSE_NULL_ACCOUNT;
   result["MUSE_NUM_INIT_MINERS"] = MUSE_NUM_INIT_MINERS;
   result["MUSE_PRODUCER_APR_PERCENT"] = MUSE_PRODUCER_APR_PERCENT;
   result["MUSE_PROXY_TO_SELF_ACCOUNT"] = MUSE_PROXY_TO_SELF_ACCOUNT;
   result["MUSE_SBD_INTEREST_COMPOUND_INTERVAL_SEC"] = MUSE_SBD_INTEREST_COMPOUND_INTERVAL_SEC;
   result["MUSE_SECONDS_PER_YEAR"] = MUSE_SECONDS_PER_YEAR;
   result["MUSE_REVERSE_AUCTION_WINDOW_SECONDS"] = MUSE_REVERSE_AUCTION_WINDOW_SECONDS;
   result["MUSE_START_MINER_VOTING_BLOCK"] = MUSE_START_MINER_VOTING_BLOCK;
   result["MUSE_START_VESTING_BLOCK"] = MUSE_START_VESTING_BLOCK;
   result["MUSE_SYMBOL"] = MUSE_SYMBOL;
   result["MUSE_TEMP_ACCOUNT"] = MUSE_TEMP_ACCOUNT;
   result["MUSE_UPVOTE_LOCKOUT"] = fc::variant( MUSE_UPVOTE_LOCKOUT, 1 );
   result["MUSE_VESTING_WITHDRAW_INTERVALS"] = MUSE_VESTING_WITHDRAW_INTERVALS;
   result["MUSE_VESTING_WITHDRAW_INTERVAL_SECONDS"] = MUSE_VESTING_WITHDRAW_INTERVAL_SECONDS;
   result["MUSE_VOTE_CHANGE_LOCKOUT_PERIOD"] = MUSE_VOTE_CHANGE_LOCKOUT_PERIOD;
   result["MUSE_VOTE_REGENERATION_SECONDS"] = MUSE_VOTE_REGENERATION_SECONDS;
   result["MUSE_SYMBOL"] = MUSE_SYMBOL;
   result["VESTS_SYMBOL"] = VESTS_SYMBOL;

   return result;
}

} } // muse::chain
